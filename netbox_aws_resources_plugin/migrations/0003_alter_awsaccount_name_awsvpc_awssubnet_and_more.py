# Generated by Django 5.0.9 on 2025-05-21 11:01

import django.db.models.deletion
import taggit.managers
import utilities.json
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ("extras", "0116_custom_link_button_color"),
        ("ipam", "0069_gfk_indexes"),
        ("netbox_aws_resources_plugin", "0002_awsaccount_parent_account"),
    ]

    operations = [
        migrations.AlterField(
            model_name="awsaccount",
            name="name",
            field=models.CharField(max_length=100),
        ),
        migrations.CreateModel(
            name="AWSVPC",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False)),
                ("created", models.DateTimeField(auto_now_add=True, null=True)),
                ("last_updated", models.DateTimeField(auto_now=True, null=True)),
                (
                    "custom_field_data",
                    models.JSONField(blank=True, default=dict, encoder=utilities.json.CustomFieldJSONEncoder),
                ),
                ("name", models.CharField(blank=True, max_length=255)),
                ("vpc_id", models.CharField(max_length=50, unique=True)),
                ("region", models.CharField(max_length=50)),
                ("state", models.CharField(default="available", max_length=30)),
                ("is_default", models.BooleanField(default=False)),
                (
                    "aws_account",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="vpcs",
                        to="netbox_aws_resources_plugin.awsaccount",
                    ),
                ),
                (
                    "cidr_block",
                    models.OneToOneField(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="aws_vpc_primary_cidr",
                        to="ipam.prefix",
                    ),
                ),
                ("tags", taggit.managers.TaggableManager(through="extras.TaggedItem", to="extras.Tag")),
            ],
            options={
                "verbose_name": "AWS VPC",
                "verbose_name_plural": "AWS VPCs",
                "ordering": ("name", "vpc_id", "region", "aws_account"),
            },
        ),
        migrations.CreateModel(
            name="AWSSubnet",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False)),
                ("created", models.DateTimeField(auto_now_add=True, null=True)),
                ("last_updated", models.DateTimeField(auto_now=True, null=True)),
                (
                    "custom_field_data",
                    models.JSONField(blank=True, default=dict, encoder=utilities.json.CustomFieldJSONEncoder),
                ),
                ("name", models.CharField(blank=True, max_length=255)),
                ("subnet_id", models.CharField(max_length=50, unique=True)),
                ("availability_zone", models.CharField(blank=True, max_length=50)),
                ("availability_zone_id", models.CharField(blank=True, max_length=50)),
                ("state", models.CharField(default="available", max_length=30)),
                ("map_public_ip_on_launch", models.BooleanField(default=False)),
                (
                    "cidr_block",
                    models.OneToOneField(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="aws_subnet_cidr",
                        to="ipam.prefix",
                    ),
                ),
                ("tags", taggit.managers.TaggableManager(through="extras.TaggedItem", to="extras.Tag")),
                (
                    "aws_vpc",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="subnets",
                        to="netbox_aws_resources_plugin.awsvpc",
                    ),
                ),
            ],
            options={
                "verbose_name": "AWS Subnet",
                "verbose_name_plural": "AWS Subnets",
                "ordering": ("aws_vpc", "cidr_block"),
            },
        ),
        migrations.CreateModel(
            name="AWSLoadBalancer",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False)),
                ("created", models.DateTimeField(auto_now_add=True, null=True)),
                ("last_updated", models.DateTimeField(auto_now=True, null=True)),
                (
                    "custom_field_data",
                    models.JSONField(blank=True, default=dict, encoder=utilities.json.CustomFieldJSONEncoder),
                ),
                ("name", models.CharField(max_length=255)),
                ("arn", models.CharField(max_length=255, unique=True)),
                ("region", models.CharField(max_length=50)),
                ("type", models.CharField(max_length=20)),
                ("scheme", models.CharField(max_length=20)),
                ("dns_name", models.CharField(blank=True, max_length=255)),
                ("state", models.CharField(default="unknown", max_length=20)),
                (
                    "aws_account",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="load_balancers",
                        to="netbox_aws_resources_plugin.awsaccount",
                    ),
                ),
                ("tags", taggit.managers.TaggableManager(through="extras.TaggedItem", to="extras.Tag")),
                (
                    "vpc",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="aws_load_balancers",
                        to="netbox_aws_resources_plugin.awsvpc",
                    ),
                ),
            ],
            options={
                "verbose_name": "AWS Load Balancer",
                "verbose_name_plural": "AWS Load Balancers",
                "ordering": ("name", "region", "aws_account"),
            },
        ),
        migrations.AddConstraint(
            model_name="awsvpc",
            constraint=models.UniqueConstraint(
                fields=("aws_account", "region", "vpc_id"), name="unique_awsvpc_account_region_vpcid"
            ),
        ),
        migrations.AddConstraint(
            model_name="awssubnet",
            constraint=models.UniqueConstraint(fields=("aws_vpc", "subnet_id"), name="unique_awssubnet_vpc_subnetid"),
        ),
        migrations.AddConstraint(
            model_name="awsloadbalancer",
            constraint=models.UniqueConstraint(
                fields=("aws_account", "region", "name"), name="unique_awsloadbalancer_account_region_name"
            ),
        ),
    ]
